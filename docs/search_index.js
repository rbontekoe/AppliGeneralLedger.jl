var documenterSearchIndex = {"docs":
[{"location":"chapter1/#.-API-1","page":"1 - API","title":"1. API","text":"","category":"section"},{"location":"chapter1/#create_journal_entry-1","page":"1 - API","title":"create_journal_entry","text":"","category":"section"},{"location":"chapter1/#","page":"1 - API","title":"1 - API","text":"create_journal_entry","category":"page"},{"location":"chapter1/#AppliGeneralLedger.create_journal_entry","page":"1 - API","title":"AppliGeneralLedger.create_journal_entry","text":"create_journal_entry(::String, ::String, ::String, ::Int64, ::Int64, ::Float64, ::Float64, ::Float64, ::String)::JournalEntry\n\nIt creates a general ledger `JournalEntry.`\n\n.\n\nExample\n\njulia> entry = create_journal_entry(\"20200700\", \"APPLI\", \"A1001\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\nJournalEntry(\"20200700\", 3, 2020-03-03T13:25:29.277, \"APPLI\", \"A1001\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\n\n\n\n\n\n","category":"function"},{"location":"chapter1/#create_account-(for-future-use)-1","page":"1 - API","title":"create_account (for future use)","text":"","category":"section"},{"location":"chapter1/#","page":"1 - API","title":"1 - API","text":"create_account","category":"page"},{"location":"chapter1/#create_record_from-1","page":"1 - API","title":"create_record_from","text":"","category":"section"},{"location":"chapter1/#","page":"1 - API","title":"1 - API","text":"create_record_from","category":"page"},{"location":"chapter1/#create_record_to-1","page":"1 - API","title":"create_record_to","text":"","category":"section"},{"location":"chapter1/#","page":"1 - API","title":"1 - API","text":"create_record_to","category":"page"},{"location":"chapter1/#create_record_vat-1","page":"1 - API","title":"create_record_vat","text":"","category":"section"},{"location":"chapter1/#","page":"1 - API","title":"1 - API","text":"create_record_vat","category":"page"},{"location":"chapter2/#.-Infrastructure-functions-1","page":"2 - Infrastructure","title":"2. Infrastructure functions","text":"","category":"section"},{"location":"chapter2/#process-1","page":"2 - Infrastructure","title":"process","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Infrastructure","title":"2 - Infrastructure","text":"process","category":"page"},{"location":"chapter2/#AppliGeneralLedger.process","page":"2 - Infrastructure","title":"AppliGeneralLedger.process","text":"process(entries::Array{JournalEntry, 1}, path_journal=\"./journal.txt\", path_ledger=\"./ledger.txt\", )\n\nIt adds a JournalEntry to the file path_journal, converts it into Record's, and adds them to the file path_ledger.\n\n@see also read_from_file\n\nExample\n\njulia> include(\"./src/infrastructure/infrastructure.jl\")\nprocess (generic function with 1 method)\n\njulia> entry1 = create_journal_entry(\"20200700\", \"APPLI\", \"A1001\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\nJournalEntry(\"20200700\", 3, 2020-03-03T13:31:07.953, \"APPLI\", \"A1001\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\n\njulia> entry2 = create_journal_entry(\"20201500\", \"PRG\", \"A1002\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\nJournalEntry(\"20201500\", 3, 2020-03-03T13:31:07.955, \"PRG\", \"A1002\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\n\njulia> process([entry1, entry2])\n\n\n\n\n\n","category":"function"},{"location":"chapter2/#read_from_file-1","page":"2 - Infrastructure","title":"read_from_file","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Infrastructure","title":"2 - Infrastructure","text":"read_from_file","category":"page"},{"location":"chapter2/#AppliGeneralLedger.read_from_file","page":"2 - Infrastructure","title":"AppliGeneralLedger.read_from_file","text":"function read_from_file(path::String)::Array{Any, 1}\n\nIt reads (structured) data back from a file.\n\nExample\n\njulia> include(\"./src/infrastructure/infrastructure.jl\")\nprocess (generic function with 1 method)\n\njulia> entry1 = create_journal_entry(\"20200700\", \"APPLI\", \"A1001\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\nJournalEntry(\"20200700\", 3, 2020-03-03T13:32:46.7, \"APPLI\", \"A1001\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\n\njulia> entry2 = create_journal_entry(\"20201500\", \"PRG\", \"A1002\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\nJournalEntry(\"20201500\", 3, 2020-03-03T13:32:46.702, \"PRG\", \"A1002\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\n\njulia> process([entry1, entry2])\n\njulia> r = read_from_file(\"./test_journal.txt\")\n2-element Array{Any,1}:\n JournalEntry(\"20200700\", 3, 2020-03-03T13:32:46.7, \"APPLI\", \"A1001\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\n JournalEntry(\"20201500\", 3, 2020-03-03T13:32:46.702, \"PRG\", \"A1002\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\n\n\n\n\n\n","category":"function"},{"location":"chapter2/#add_to_file-1","page":"2 - Infrastructure","title":"add_to_file","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Infrastructure","title":"2 - Infrastructure","text":"add_to_file","category":"page"},{"location":"chapter3/#Examples-1","page":"3 - Examples","title":"Examples","text":"","category":"section"},{"location":"chapter3/#Example-1-developer-1","page":"3 - Examples","title":"Example 1 -  developer","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Examples","title":"3 - Examples","text":"# test.jl\n\n# link to model\ninclude(\"./src/infrastructure/infrastructure.jl\")\n\n# create entries including VAT\nentry1 = create_journal_entry(\"20200700\", \"APPLI\", \"A1001\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\nentry2 = create_journal_entry(\"20201500\", \"PRG\", \"A1002\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\n\n# process the entries\nprocess([entry1, entry2])\n\n# print stored JournalEntry's\nr = read_from_file(\"test_journal.txt\")\n\nprintln(DataFrame(r))\n\n# print stored Records's\nr = read_from_file(\"test_ledger.txt\")\n\nprintln(DataFrame(r))\n\n# create paid invoice entries\nentry1 = create_journal_entry(\"20201500\", \"APPLI\", \"A1001\", 1150, 1300, 1210.0, 0.0, 0.0, \"LS\")\nentry2 = create_journal_entry(\"20201500\", \"PRG\", \"A1002\", 1150, 1300, 1210.0, 0.0, 0.0, \"LS\")\n\n# print stored JournalEntry's\nprocess([entry1, entry2])\n\n# print stored JournalEntry's\nr = read_from_file(\"test_ledger.txt\")\n\ndf = DataFrame(r)\n\nprintln(df)\n\n# print accounts receivable\n\ndf2 = df[df.accountid .== 1300, :]\n\n#= OR\n\nusing Query\n\nx = df |> @filter(_.accountid == 1300) |> DataFrame\n=#\n\nprintln(df2)\n\n# remove files\ncmd = `rm test_ledger.txt test_journal.txt`\n\nrun(cmd)\n","category":"page"},{"location":"chapter3/#Example-2-user-1","page":"3 - Examples","title":"Example 2 - user","text":"","category":"section"},{"location":"chapter3/#","page":"3 - Examples","title":"3 - Examples","text":"julia> using AppliGeneralLedger\n[ Info: Precompiling AppliGeneralLedger [153ef306-36d1-11ea-1f0d-e3f38f84e10d]\n\njulia> entry1 = create_journal_entry(\"20200700\", \"APPLI\", \"A1001\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\nAppliGeneralLedger.JournalEntry(\"20200700\", 3, 2020-03-03T14:56:54.508, \"APPLI\", \"A1001\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\n\njulia> entry2 = create_journal_entry(\"20201500\", \"PRG\", \"A1002\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\nAppliGeneralLedger.JournalEntry(\"20201500\", 3, 2020-03-03T14:56:57.475, \"PRG\", \"A1002\", 1300, 8000, 1000.0, 0.0, 210.0, \"LS\")\n\njulia> process([entry1, entry2])\n\njulia> r = AppliGeneralLedger.read_from_file(\"test_ledger.txt\")\n6-element Array{Any,1}:\n AppliGeneralLedger.Record(\"20200700\", 1300, 2020-03-03T14:56:54.508, \"APPLI\", \"A1001\", 1210.0, 0.0, \"LS\")\n AppliGeneralLedger.Record(\"20200700\", 8000, 2020-03-03T14:56:54.508, \"APPLI\", \"A1001\", 0.0, 1000.0, \"LS\")\n AppliGeneralLedger.Record(\"20200700\", 4000, 2020-03-03T14:56:54.508, \"APPLI\", \"A1001\", 0.0, 210.0, \"LS\")\n AppliGeneralLedger.Record(\"20201500\", 1300, 2020-03-03T14:56:57.475, \"PRG\", \"A1002\", 1210.0, 0.0, \"LS\")\n AppliGeneralLedger.Record(\"20201500\", 8000, 2020-03-03T14:56:57.475, \"PRG\", \"A1002\", 0.0, 1000.0, \"LS\")\n AppliGeneralLedger.Record(\"20201500\", 4000, 2020-03-03T14:56:57.475, \"PRG\", \"A1002\", 0.0, 210.0, \"LS\")\n\njulia> using DataFrames\n\njulia> DataFrame(r)\n6×8 DataFrame\n│ Row │ id       │ accountid │ date                    │ customerid │ invoice_nbr │ debit   │ credit  │ descr  │\n│     │ String   │ Int64     │ Dates.DateTime          │ String     │ String      │ Float64 │ Float64 │ String │\n├─────┼──────────┼───────────┼─────────────────────────┼────────────┼─────────────┼─────────┼─────────┼────────┤\n│ 1   │ 20200700 │ 1300      │ 2020-03-03T14:56:54.508 │ APPLI      │ A1001       │ 1210.0  │ 0.0     │ LS     │\n│ 2   │ 20200700 │ 8000      │ 2020-03-03T14:56:54.508 │ APPLI      │ A1001       │ 0.0     │ 1000.0  │ LS     │\n│ 3   │ 20200700 │ 4000      │ 2020-03-03T14:56:54.508 │ APPLI      │ A1001       │ 0.0     │ 210.0   │ LS     │\n│ 4   │ 20201500 │ 1300      │ 2020-03-03T14:56:57.475 │ PRG        │ A1002       │ 1210.0  │ 0.0     │ LS     │\n│ 5   │ 20201500 │ 8000      │ 2020-03-03T14:56:57.475 │ PRG        │ A1002       │ 0.0     │ 1000.0  │ LS     │\n│ 6   │ 20201500 │ 4000      │ 2020-03-03T14:56:57.475 │ PRG        │ A1002       │ 0.0     │ 210.0   │ LS     │\n\njulia> entry1 = create_journal_entry(\"20201500\", \"APPLI\", \"A1001\", 1150, 1300, 1210.0, 0.0, 0.0, \"LS\")\nAppliGeneralLedger.JournalEntry(\"20201500\", 3, 2020-03-03T15:00:56.578, \"APPLI\", \"A1001\", 1150, 1300, 1210.0, 0.0, 0.0, \"LS\")\n\njulia> entry2 = create_journal_entry(\"20201500\", \"PRG\", \"A1002\", 1150, 1300, 1210.0, 0.0, 0.0, \"LS\")\nAppliGeneralLedger.JournalEntry(\"20201500\", 3, 2020-03-03T15:00:58.199, \"PRG\", \"A1002\", 1150, 1300, 1210.0, 0.0, 0.0, \"LS\")\n\njulia> process([entry1, entry2])\n\njulia> r = AppliGeneralLedger.read_from_file(\"test_ledger.txt\")\n10-element Array{Any,1}:\n AppliGeneralLedger.Record(\"20200700\", 1300, 2020-03-03T14:56:54.508, \"APPLI\", \"A1001\", 1210.0, 0.0, \"LS\")\n AppliGeneralLedger.Record(\"20200700\", 8000, 2020-03-03T14:56:54.508, \"APPLI\", \"A1001\", 0.0, 1000.0, \"LS\")\n AppliGeneralLedger.Record(\"20200700\", 4000, 2020-03-03T14:56:54.508, \"APPLI\", \"A1001\", 0.0, 210.0, \"LS\")\n AppliGeneralLedger.Record(\"20201500\", 1300, 2020-03-03T14:56:57.475, \"PRG\", \"A1002\", 1210.0, 0.0, \"LS\")\n AppliGeneralLedger.Record(\"20201500\", 8000, 2020-03-03T14:56:57.475, \"PRG\", \"A1002\", 0.0, 1000.0, \"LS\")\n AppliGeneralLedger.Record(\"20201500\", 4000, 2020-03-03T14:56:57.475, \"PRG\", \"A1002\", 0.0, 210.0, \"LS\")\n AppliGeneralLedger.Record(\"20201500\", 1150, 2020-03-03T15:00:56.578, \"APPLI\", \"A1001\", 1210.0, 0.0, \"LS\")\n AppliGeneralLedger.Record(\"20201500\", 1300, 2020-03-03T15:00:56.578, \"APPLI\", \"A1001\", 0.0, 1210.0, \"LS\")\n AppliGeneralLedger.Record(\"20201500\", 1150, 2020-03-03T15:00:58.199, \"PRG\", \"A1002\", 1210.0, 0.0, \"LS\")\n AppliGeneralLedger.Record(\"20201500\", 1300, 2020-03-03T15:00:58.199, \"PRG\", \"A1002\", 0.0, 1210.0, \"LS\")\n\n julia> df = DataFrame(r)\n10×8 DataFrame\n│ Row │ id       │ accountid │ date                    │ customerid │ invoice_nbr │ debit   │ credit  │ descr  │\n│     │ String   │ Int64     │ Dates.DateTime          │ String     │ String      │ Float64 │ Float64 │ String │\n├─────┼──────────┼───────────┼─────────────────────────┼────────────┼─────────────┼─────────┼─────────┼────────┤\n│ 1   │ 20200700 │ 1300      │ 2020-03-03T14:56:54.508 │ APPLI      │ A1001       │ 1210.0  │ 0.0     │ LS     │\n│ 2   │ 20200700 │ 8000      │ 2020-03-03T14:56:54.508 │ APPLI      │ A1001       │ 0.0     │ 1000.0  │ LS     │\n⋮\n│ 8   │ 20201500 │ 1300      │ 2020-03-03T15:00:56.578 │ APPLI      │ A1001       │ 0.0     │ 1210.0  │ LS     │\n│ 9   │ 20201500 │ 1150      │ 2020-03-03T15:00:58.199 │ PRG        │ A1002       │ 1210.0  │ 0.0     │ LS     │\n│ 10  │ 20201500 │ 1300      │ 2020-03-03T15:00:58.199 │ PRG        │ A1002       │ 0.0     │ 1210.0  │ LS     │\n\njulia> df2 = df[df.accountid .== 1300, :]\n4×8 DataFrame\n│ Row │ id       │ accountid │ date                    │ customerid │ invoice_nbr │ debit   │ credit  │ descr  │\n│     │ String   │ Int64     │ Dates.DateTime          │ String     │ String      │ Float64 │ Float64 │ String │\n├─────┼──────────┼───────────┼─────────────────────────┼────────────┼─────────────┼─────────┼─────────┼────────┤\n│ 1   │ 20200700 │ 1300      │ 2020-03-03T14:56:54.508 │ APPLI      │ A1001       │ 1210.0  │ 0.0     │ LS     │\n│ 2   │ 20201500 │ 1300      │ 2020-03-03T14:56:57.475 │ PRG        │ A1002       │ 1210.0  │ 0.0     │ LS     │\n│ 3   │ 20201500 │ 1300      │ 2020-03-03T15:00:56.578 │ APPLI      │ A1001       │ 0.0     │ 1210.0  │ LS     │\n│ 4   │ 20201500 │ 1300      │ 2020-03-03T15:00:58.199 │ PRG        │ A1002       │ 0.0     │ 1210.0  │ LS     │\n\njulia> cmd = `rm test_ledger.txt test_journal.txt`\n`rm test_ledger.txt test_journal.txt`\n\njulia> run(cmd)\nProcess(`rm test_ledger.txt test_journal.txt`, ProcessExited(0))","category":"page"},{"location":"#","page":"General Ledger","title":"General Ledger","text":"(Image: AppliGate)","category":"page"},{"location":"#General-Ledger-module-1","page":"General Ledger","title":"General Ledger module","text":"","category":"section"},{"location":"#","page":"General Ledger","title":"General Ledger","text":"In course BAWJ, you learn to create Julia modules. The software you write makes use of these modules and runs in Docker containers.","category":"page"},{"location":"#","page":"General Ledger","title":"General Ledger","text":"The AppliGeneralLedger module is used in the course to imitate a general ledger.","category":"page"}]
}
